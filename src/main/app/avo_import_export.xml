<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:mulerequester="http://www.mulesoft.org/schema/mule/mulerequester" xmlns:ftp="http://www.mulesoft.org/schema/mule/ee/ftp" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:context="http://www.springframework.org/schema/context" xmlns:amqps="http://www.mulesoft.org/schema/mule/amqps" xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:anypoint-mq="http://www.mulesoft.org/schema/mule/anypoint-mq" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/anypoint-mq http://www.mulesoft.org/schema/mule/anypoint-mq/current/mule-anypoint-mq.xsd
http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/ftp http://www.mulesoft.org/schema/mule/ee/ftp/current/mule-ftp-ee.xsd
http://www.mulesoft.org/schema/mule/mulerequester http://www.mulesoft.org/schema/mule/mulerequester/current/mule-mulerequester.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd"> 
    <context:property-placeholder location="${mule.env}.properties"/>
     <db:generic-config name="Borndigital" url="jdbc:postgresql://${db.host}:${db.port}/${db.database}?password=${db.password}&amp;user=${db.username}" driverClassName="org.postgresql.Driver" doc:name="Borndigital DB">
        <reconnect-forever></reconnect-forever>  
    </db:generic-config>
    <http:request-config  name="PID_webservice" host="${pid.host}" port="${pid.port}" basePath="/" doc:name="HTTP Request Configuration" responseTimeout="30000"/>
    <ftp:connector streaming="true" name="FTP" pollingFrequency="1000" validateConnections="true" doc:name="FTP"></ftp:connector>
<!--     <ftp:connector name="FTP"  validateConnections="true" doc:name="FTP" connectionTimeout="10000"/> -->
    <http:request-config name="elastic_search" host="${elastic.host}" port="${elastic.port}" basePath="${elastic.path}" doc:name="HTTP Request Configuration" responseTimeout="30000" />
    <amqp:connector name="AMQP_0_9_Connector" validateConnections="true" host="${rabbit.host}" username="${rabbit.username}" password="${rabbit.password}" ackMode="MANUAL" prefetchCount="1" numberOfChannels="2" doc:name="AMQP-0-9 Connector" priority="9">
        <reconnect/>
    </amqp:connector>
    <http:request-config name="Aspect_ratio_API" host="${aspect_ratio_api.host}" port="${aspect_ratio_api.port}" basePath="/" doc:name="HTTP Request Configuration" responseTimeout="30000"/>
    <flow name="export_mam_avoFlow">
        <amqp:inbound-endpoint
			queueName="avo_export_request"
			exchange-pattern="request-response"
			connector-ref="AMQP_0_9_Connector"
			doc:name="Get message from Export queue"
			responseTimeout="10000"
			numberOfChannels="1">
            <reconnect-forever/>
        </amqp:inbound-endpoint>
        <set-variable variableName="original_message" value="#[payload]" doc:name="Set original_message"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <flow-ref name="init_variables" doc:name="init_variables"/>
        <flow-ref name="check_filename_special_characters" doc:name="check_filename_special_characters"/>
        <choice doc:name="Contains bad characters?">
            <when expression="#[flowVars.filename_contains_bad_characters==false]">
                <logger message="Doesn't contain bad chars" level="INFO" category="  " doc:name="Doesn't contain bad chars"/>
                <flow-ref name="get_original_metadata_from_sidecar" doc:name="get_original_metadata_from_sidecar"/>
                <flow-ref name="get_new_pid" doc:name="get_new_pid"/>
                <flow-ref name="map_metadata" doc:name="map_metadata"/>
                <flow-ref name="check_aspect_ratio" doc:name="check_aspect_ratio"/>
                <flow-ref name="transfer_files" doc:name="transfer_files"/>
            </when>
            <otherwise>
                <flow-ref name="move_files_for_correct_name" doc:name="move_files_for_correct_name"/>
            </otherwise>
        </choice>
       	<amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="Something went wrong with #[flowVars.filename]" level="INFO" doc:name="Something went wrong"/>
            <set-variable variableName="state" value="#['FAILED']" doc:name="Set state (FAILED)"/>
            <until-successful maxRetries="5" synchronous="true" doc:name="Until Successful">
                <flow-ref name="log_elastic_search" doc:name="log_elastic_search"/>
            </until-successful>
            <set-payload value="#[flowVars.original_message]" doc:name="Set Payload to original_message"/>
            <amqp:outbound-endpoint queueName="avo_export_request_errors" responseTimeout="10000" exchange-pattern="request-response" connector-ref="AMQP_0_9_Connector" doc:name="Send message to avo_export_request_errors">
                <reconnect/>
            </amqp:outbound-endpoint>
            <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
        </catch-exception-strategy>
    </flow>
    <sub-flow name="init_variables">
        <set-variable variableName="filename" value="#[payload.sip_package[0].file_name.substring(0, payload.sip_package[0].file_name.lastIndexOf('.'))]" doc:name="Set filename without extension"/>
        <set-variable variableName="extension" value="#[payload.sip_package[1].file_name.substring(payload.sip_package[1].file_name.lastIndexOf('.')+1)]" doc:name="Set extension"/>
        <choice doc:name="Is extension == xml?">
            <when expression="#[!flowVars.extension.equals('xml')]">
                <logger level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <set-variable variableName="extension" value="#[payload.sip_package[0].file_name.substring(payload.sip_package[0].file_name.lastIndexOf('.')+1)]" doc:name="Set extension"/>
            </otherwise>
        </choice>
        <set-variable variableName="source_filename" value="#[payload.sip_package[0].file_name]" doc:name="Set source_filename"/>
        <set-variable variableName="filepath" value="#[payload.sip_package[0].file_path]" doc:name="Set filepath"/>
        <set-variable variableName="host" value="#[payload.server]" doc:name="Set host"/>
        <set-variable variableName="username" value="#[payload.username]" doc:name="Set username"/>
        <set-variable variableName="password" value="#[payload.password]" doc:name="Set password"/>
        <set-variable variableName="state" value="#[&quot;SIP_DETECTED&quot;]" doc:name="Set state (SIP_DETECTED)"/>
        <until-successful maxRetries="5" synchronous="true" doc:name="Until Successful">
            <flow-ref name="log_elastic_search" doc:name="log_elastic_search"/>
        </until-successful>
        <logger message="SIP_DETECTED" level="INFO" doc:name="SIP_DETECTED"/>
    </sub-flow>
    <sub-flow name="check_filename_special_characters">
        <set-variable variableName="filename_contains_bad_characters" value="#[flowVars.filename.matches(&quot;.*[()#&#235;].*&quot;)]" doc:name="Set filename_contains_bad_characters (e.g.: ()#)"/>
        <set-variable variableName="state" value="BAD_CHAR_CHECKED" doc:name="Set state (BAD_CHAR_CHECKED)"/>
        <until-successful maxRetries="5" synchronous="true" doc:name="Until Successful">
            <flow-ref name="log_elastic_search" doc:name="log_elastic_search"/>
        </until-successful>
        <logger message="BAD_CHAR_CHECKED: #[flowVars.filename_contains_bad_characters]" level="INFO" doc:name="BAD_CHAR_CHECKED"/>
    </sub-flow>
    <sub-flow name="move_files_for_correct_name">
        <set-variable variableName="filename_corrected" value="#[flowVars.filename.replaceAll(&quot;\\(&quot;,&quot; &quot;).replaceAll(&quot;\\)&quot;,&quot; &quot;).replaceAll(&quot;#&quot;,&quot; &quot;).replaceAll(&quot;&#235;&quot;,&quot;e&quot;).trim()]" doc:name="Set filename_corrected"/>
        <set-variable variableName="destinationpath" value="#['/export/home/viaa/incoming/naarAVO']" doc:name="Set destinationpath to naarAVO"/>
        <dw:transform-message doc:name="Build move request for sidecar">
            <dw:input-variable variableName="currentItem"/>
            <dw:set-payload><![CDATA[%dw 1.0
	%input payload application/java
	%output application/json
	---
	{
		"source_name": flowVars.filename ++ ".xml",
		"destination_name": flowVars.filename_corrected ++ ".xml",
		"source_path": flowVars.filepath,
		"destination_path": flowVars.destinationpath,
	    "host": flowVars.host,
	    "username": flowVars.username,
	    "password": flowVars.password,
	    "correlation_id": ""
	}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <amqp:outbound-endpoint queueName="move_requests" responseTimeout="10000" connector-ref="AMQP_0_9_Connector" doc:name="Send message to move_requests">
            <reconnect-forever/>
        </amqp:outbound-endpoint>
        <dw:transform-message doc:name="Build move request for essence">
            <dw:input-variable variableName="currentItem"/>
            <dw:set-payload><![CDATA[%dw 1.0
	%input payload application/java
	%output application/json
	---
	{
		"source_name": flowVars.filename ++ "." ++ flowVars.extension,
		"destination_name": flowVars.filename_corrected ++ "." ++ flowVars.extension,
		"source_path": flowVars.filepath,
		"destination_path": flowVars.destinationpath,
	    "host": flowVars.host,
	    "username": flowVars.username,
	    "password": flowVars.password,
	    "correlation_id": ""
	}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <amqp:outbound-endpoint queueName="move_requests" responseTimeout="10000" connector-ref="AMQP_0_9_Connector" doc:name="Send message to move_requests">
            <reconnect-forever/>
        </amqp:outbound-endpoint>
        <set-variable variableName="state" value="FILES_MOVED" doc:name="Set state (FILES_MOVED)"/>
        <until-successful maxRetries="5" synchronous="true" doc:name="Until Successful">
            <flow-ref name="log_elastic_search" doc:name="log_elastic_search"/>
        </until-successful>
        <logger message="FILES_MOVED" level="INFO" doc:name="FILES_MOVED"/>
    </sub-flow>
    <sub-flow name="get_original_metadata_from_sidecar">
        <mulerequester:request resource="#[&quot;ftp://&quot;+flowVars.username+&quot;:&quot;+flowVars.password+&quot;@&quot;+flowVars.host+&quot;/&quot;+flowVars.filepath+&quot;/&quot;+flowVars.filename+&quot;.xml?connector=FTP&quot;]" timeout="10000" throwExceptionOnTimeout="true" doc:name="Read sidecar"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <dw:transform-message doc:name="Extract MediaHAVEN_external_metadata">
            <dw:set-payload><![CDATA[%dw 1.0
%input payload application/xml
%output application/xml
---
{
    MediaHAVEN_external_metadata: payload.mets.dmdSec.mdWrap.xmlData.MediaHAVEN_external_metadata    
}]]></dw:set-payload>
        </dw:transform-message>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="is_audio" value="#[xpath3('//MimeType/text()').contains(&quot;audio&quot;)]" doc:name="Set is_audio (from mime_type inside technical metadata)"/>
        <dw:transform-message doc:name="Make simpler version (disgarding extra metadata features of MH 17.1)">
            <dw:input-payload doc:sample="sample_data/empty_1.xml"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
{
	MediaHAVEN_external_metadata: {
		(title: payload.MediaHAVEN_external_metadata.title) when payload.MediaHAVEN_external_metadata.title?,
		(description: payload.MediaHAVEN_external_metadata.description) when payload.MediaHAVEN_external_metadata.description?,
		(mime_type: payload.MediaHAVEN_external_metadata.mime_type) when payload.MediaHAVEN_external_metadata.mime_type?,
		(keywords: payload.MediaHAVEN_external_metadata.keywords) when payload.MediaHAVEN_external_metadata.keywords?,
		MDProperties: payload.MediaHAVEN_external_metadata.MDProperties
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="original_metadata" value="#[payload]" doc:name="Set original_metadata with MHEM"/>
        <set-variable variableName="original_pid" value="#[xpath3('//PID/text()')]" doc:name="Set original_pid"/>
        <set-variable variableName="original_cp" value="#[xpath3('//CP/text()')]" doc:name="Set original_cp"/>
        <set-variable variableName="original_md5" value="#[xpath3('//md5_viaa/text()')]" doc:name="Set original_md5"/>
        <set-variable variableName="original_cp_id" value="#[xpath3('//CP_id/text()')]" doc:name="Set original_cp_id"/>
        <set-variable variableName="original_ingestspacename" value="#[xpath3('//ingestspacename/text()')]" doc:name="Set original_ingestspacename"/>
        <set-variable variableName="briefing_ids" value="#[xpath3(&quot;/string-join(//BriefingID[not(@type='list')]/text(), ' ')&quot;)]" doc:name="Set briefing_ids as text field for logging"/>
        <set-variable variableName="briefing_ids " value="#[flowVars.briefing_ids.replaceAll(&quot;\n&quot;,&quot;&quot;).trim().replaceAll(&quot;        &quot;,&quot; &quot;)]" doc:name="Rewrite briefing_ids without leading and trailing whitespace"/>
        <set-variable variableName="state" value="MD_OBTAINED" doc:name="Set state (MD_OBTAINED)"/>
        <until-successful maxRetries="5" synchronous="true" doc:name="Until Successful">
            <flow-ref name="log_elastic_search" doc:name="log_elastic_search"/>
        </until-successful>
        <logger message="MD OBTAINED" level="INFO" doc:name="MD OBTAINED"/>
    </sub-flow>
    <sub-flow name="get_new_pid">
        <http:request config-ref="PID_webservice" path="${pid.path}" method="GET" doc:name="Request pid"/>
        <json:json-to-object-transformer returnClass="be.viaa.response.PIDIdResponse[]" doc:name="Get generated pid"/>
        <set-variable variableName="new_pid" value="#[payload[0].id]" doc:name="Set new_pid"/>
        <set-variable variableName="state" value="#[&quot;PID_OBTAINED&quot;]" doc:name="Set state (PID_OBTAINED)"/>
        <until-successful maxRetries="5" synchronous="true" doc:name="Until Successful">
            <flow-ref name="log_elastic_search" doc:name="log_elastic_search"/>
        </until-successful>
        <logger message="PID OBTAINED" level="INFO" doc:name="PID OBTAINED"/>
    </sub-flow>
    <sub-flow name="map_metadata">
        <set-payload value="#[flowVars.original_metadata]" doc:name="Set Payload with original_metadata"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML (because it needs to an object and not a string)"/>
        <dw:transform-message metadata:id="0118c471-3028-463b-a667-7e79cd43bf6a" doc:name="Create adapted metadata">
            <dw:input-payload doc:sample="sample_data/empty.xml"/>
            <dw:input-variable variableName="metadata_no_root"/>
            <dw:input-variable variableName="generated_pid"/>
            <dw:input-variable doc:sample="sample_data\empty_2.xml" variableName="pid"/>
            <dw:input-variable  variableName="metadata" mimeType="application/xml"/>
            <dw:input-variable  variableName="original_metadata" doc:sample="sample_data/xml.xml"/>
            <dw:set-payload><![CDATA[%dw 1.0
%input payload application/xml
%output application/xml
---
{
	MediaHAVEN_external_metadata:  {
		// Copy everything except MDProperties
		(((payload.MediaHAVEN_external_metadata as :array) as :object) map (
			($) when $ != payload.MediaHAVEN_external_metadata.MDProperties otherwise {}
		)),
		"MDProperties": {
			(payload.MediaHAVEN_external_metadata.*MDProperties map (
				$
			)),
			// Original CP
			Original_CP: flowVars.original_cp,
			// Original CP ID
			Original_CP_id: p('vrt.ldap_id'),
			// Add relation to original PID
			"dc_relations" @(type: "list"): {
				is_verwant_aan: flowVars.original_pid
			}
		}
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="new_metadata" value="#[payload.replaceAll('&lt;PID&gt;'+flowVars.original_pid+'&lt;/PID&gt;', '&lt;PID&gt;'+flowVars.new_pid+'&lt;/PID&gt;').replaceAll('&lt;CP&gt;'+flowVars.original_cp+'&lt;/CP&gt;', '&lt;CP&gt;testbeeld&lt;/CP&gt;').replaceAll('&lt;CP_id&gt;'+flowVars.original_cp_id+'&lt;/CP_id&gt;', '&lt;CP_id&gt;OR-h41jm1d&lt;/CP_id&gt;').replaceAll('&lt;md5&gt;'+flowVars.original_md5+'&lt;/md5&gt;', '').replaceAll('&lt;md5_viaa&gt;'+flowVars.original_md5+'&lt;/md5_viaa&gt;', '').replaceAll('&lt;ingestspacename&gt;'+flowVars.original_ingestspacename+'&lt;/ingestspacename&gt;', '').replaceAll('    \n', '')]" doc:name="Set new_metadata by replacing PID, CP and CP_id and deleting MD5 and ingestspacename"/>
        <set-variable variableName="state" value="#[&quot;METADATA_MAPPED&quot;]" doc:name="Set state (METADATA_MAPPED)"/>
        <until-successful maxRetries="5" synchronous="true" doc:name="Until Successful">
            <flow-ref name="log_elastic_search" doc:name="log_elastic_search"/>
        </until-successful>

        <logger message="METADATA MAPPED" level="INFO" doc:name="METADATA MAPPED"/>
    </sub-flow>
    <sub-flow name="check_aspect_ratio">
        <choice doc:name="No check when audio">
            <when expression="#[flowVars.is_audio.equals(true) || extension.equals('WAV') || flowVars.extension.equals('wav')]">
                <set-variable variableName="is_aspect_ratio_correct" value="#[true]" doc:name="Set is_aspect_ratio_correct TRUE for audio"/>
            </when>
            <otherwise>
                <until-successful maxRetries="5" synchronous="true" doc:name="Until Successful">
                    <http:request config-ref="Aspect_ratio_API" path="#['/vrt/' + flowVars.original_pid]" method="GET" doc:name="Request aspect ratios of the original (vrt) pid to see difference between metadata and essence"/>
                </until-successful>
                <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                <json:json-to-object-transformer doc:name="JSON to Object"/>
                <set-variable variableName="aspect_ratio_essence" value="#[payload.get('data').get('aspect_ratio_essence').toString().replaceAll('&quot;','')]" doc:name="Set aspect_ratio_essence"/>
                <set-variable variableName="aspect_ratio_metadata" value="#[payload.get('data').get('aspect_ratio_metadata').toString().replaceAll('&quot;','')]" doc:name="Set aspect_ratio_metadata"/>
                <set-variable variableName="is_aspect_ratio_correct" value="#[flowVars.aspect_ratio_essence.equals(flowVars.aspect_ratio_metadata)]" doc:name="Set is_aspect_ratio_correct"/>
                <set-variable variableName="state" value="#[&quot;ASPECT_RATIO_CHECK&quot;]" doc:name="Set state (ASPECT_RATIO_CHECK)"/>
                <until-successful maxRetries="5" synchronous="true" doc:name="Until Successful">
                    <flow-ref name="log_elastic_search" doc:name="log_elastic_search"/>
                </until-successful>
            </otherwise>
        </choice>
        <logger message="ASPECT RATIO CHECKED" level="INFO" doc:name="ASPECT RATIO CHECKED"/>
    </sub-flow>
    <sub-flow name="transfer_files">
        <set-payload value="#[flowVars.new_metadata]" doc:name="Set Payload with new_metadata"/>
        <ftp:outbound-endpoint host="${ftpDestination.host}" port="21" responseTimeout="10000" doc:name="Export new sidecar to destination" password="${ftpDestination.password}" path="${ftpDestination.path}" user="${ftpDestination.username}" connector-ref="FTP" outputPattern="#[flowVars.new_pid + &quot;.xml&quot;]"/>
        <choice doc:name="Is the aspect ratio of the essence correct?">
            <when expression="#[flowVars.is_aspect_ratio_correct == false]">
                <logger message="ARs are not equal, use the" level="INFO" doc:name="Aspect ratio is not correct, send request to transcoder"/>
                <dw:transform-message doc:name="Create transcoder request which includes FXP">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"destpath": flowVars.filepath ++ "/tmp/",
	
	src_server: flowVars.host,
	sourcefile: flowVars.filepath ++ '/' ++ flowVars.filename ++ "." ++ flowVars.extension,
	src_server_login: flowVars.username,
	src_server_pass: flowVars.password,
	
	dest_server: p('ftpDestination.host'),
	dest_server_path: p('ftpDestination.path'),
	dest_server_filename: flowVars.new_pid ++ ".mp4",
	dest_server_login: p('ftpDestination.username'),
	dest_server_pass: p('ftpDestination.password'),
	
	crop: true,
	format: "avo", // must be retranscoded
	height: "480",
	aspect: flowVars.aspect_ratio_metadata when (flowVars.aspect_ratio_metadata != 'unknown' and flowVars.aspect_ratio_metadata != '"unknown"') 
			otherwise (flowVars.aspect_ratio_essence when (flowVars.aspect_ratio_essence != 'unknown' and flowVars.aspect_ratio_essence != '"unknown"')
			otherwise 'auto') // ffprobe will search for it when unknown
		
	// move: false
}]]></dw:set-payload>
                </dw:transform-message>
                <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                <amqp:outbound-endpoint queueName="transcoder_requests" responseTimeout="10000" exchange-pattern="request-response" connector-ref="AMQP_0_9_Connector" doc:name="Send message to transcoder_requests"/>
            </when>
            <otherwise>
                <logger level="INFO" doc:name="Aspect ratio is correct, send request to FXP"/>
                <dw:transform-message doc:name="Create FXP request">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	source_host: flowVars.host,
	source_path: flowVars.filepath,
	source_file: flowVars.filename ++ "." ++ flowVars.extension,
	source_user: flowVars.username,
	source_password: flowVars.password,
	
	destination_host: p('ftpDestination.host'),
	destination_path: p('ftpDestination.path'),
	destination_file: flowVars.new_pid ++ ".mp4",
	destination_user: p('ftpDestination.username'),
	destination_password: p('ftpDestination.password'),
	
	move: false
}]]></dw:set-payload>
                </dw:transform-message>
                <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                <amqp:outbound-endpoint queueName="fxp_requests" responseTimeout="10000" exchange-pattern="request-response" connector-ref="AMQP_0_9_Connector" doc:name="Send message to fxp_requests"/>
            </otherwise>
        </choice>
        <set-variable variableName="state" value="#[&quot;SIP_DELIVERED&quot;]" doc:name="Set state (SIP_DELIVERED)"/>
        <until-successful maxRetries="5" synchronous="true" doc:name="Until Successful">
            <flow-ref name="log_elastic_search" doc:name="log_elastic_search"/>
        </until-successful>
        <logger message="SIP DELIVERED" level="INFO" doc:name="SIP DELIVERED"/>
    </sub-flow>
    <sub-flow name="delete_original_files">
        <dw:transform-message doc:name="Create delete request for sidecar">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	host: flowVars.host,
	file_path: flowVars.filepath,
	file_name: flowVars.filename ++ ".xml",
	username: flowVars.username,
	password: flowVars.password
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <amqp:outbound-endpoint queueName="delete_requests" responseTimeout="10000" exchange-pattern="request-response" connector-ref="AMQP_0_9_Connector" doc:name="Send message to delete_requests"/>
        <set-variable variableName="state" value="#[&quot;SIDECAR_DELETED&quot;]" doc:name="Set state (SIDECAR_DELETED)"/>
        <until-successful maxRetries="5" synchronous="true" doc:name="Until Successful">
            <flow-ref name="log_elastic_search" doc:name="log_elastic_search"/>
        </until-successful>
        <logger message="SIDECAR DELETED" level="INFO" doc:name="SIDECAR DELETED"/>
    </sub-flow>
    <sub-flow name="log_elastic_search">
        <dw:transform-message doc:name="Create message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	state: flowVars.state,
	timestamp:  now as :datetime {format: "yyyy-MM-dd'T'HH:mm:ss.SSSZ"},
	(tenant: flowVars.tenant) when flowVars.tenant != null,
	(filename: flowVars.filename) when flowVars.filename != null,
	(extension: flowVars.extension) when flowVars.extension != null,
	(filepath: flowVars.filepath) when flowVars.filepath != null,
	(host: flowVars.host) when flowVars.host != null,
	(briefing_ids: flowVars.briefing_ids) when flowVars.briefing_ids != null,
	(briefing_title: flowVars.briefing_title) when flowVars.briefing_title != null,
	(original_pid: flowVars.original_pid) when flowVars.original_pid != null,
	(new_pid: flowVars.new_pid) when flowVars.new_pid != null,
	(original_metadata: flowVars.original_metadata) when flowVars.original_metadata != null,
	(new_metadata: flowVars.new_metadata) when flowVars.new_metadata != null,
	(aspect_ratio_essence: flowVars.aspect_ratio_essence) when flowVars.aspect_ratio_essence != null,
	(aspect_ratio_metadata: flowVars.aspect_ratio_metadata) when flowVars.aspect_ratio_metadata != null,
	(is_audio: flowVars.is_audio) when flowVars.is_audio != null,
	(is_aspect_ratio_correct: flowVars.is_aspect_ratio_correct) when flowVars.is_aspect_ratio_correct != null,
	(filename_contains_bad_characters: flowVars.filename_contains_bad_characters) when flowVars.filename_contains_bad_characters != null
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <logger message="#[payload]" level="INFO" doc:name="Debug message"/>
        <http:request config-ref="elastic_search" path="avo_import_export/events" method="POST" doc:name="POST event to ES"/>
    </sub-flow>
</mule>
