<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:mulerequester="http://www.mulesoft.org/schema/mule/mulerequester" xmlns:ftp="http://www.mulesoft.org/schema/mule/ee/ftp" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:context="http://www.springframework.org/schema/context" xmlns:amqps="http://www.mulesoft.org/schema/mule/amqps" xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:anypoint-mq="http://www.mulesoft.org/schema/mule/anypoint-mq" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/anypoint-mq http://www.mulesoft.org/schema/mule/anypoint-mq/current/mule-anypoint-mq.xsd
http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/ftp http://www.mulesoft.org/schema/mule/ee/ftp/current/mule-ftp-ee.xsd
http://www.mulesoft.org/schema/mule/mulerequester http://www.mulesoft.org/schema/mule/mulerequester/current/mule-mulerequester.xsd"> 
    <context:property-placeholder location="${mule.env}.properties"/>
    <http:request-config name="PID_webservice" host="${pid.host}" port="${pid.port}" basePath="/" doc:name="HTTP Request Configuration" responseTimeout="30000"/>
    <ftp:connector streaming="true" name="FTP" pollingFrequency="1000" validateConnections="true" doc:name="FTP"></ftp:connector>
<!--     <ftp:connector name="FTP"  validateConnections="true" doc:name="FTP" connectionTimeout="10000"/> -->
    <http:request-config name="elastic_search" host="${elastic.host}" port="${elastic.port}" basePath="${elastic.path}" doc:name="HTTP Request Configuration" responseTimeout="30000" usePersistentConnections="false"/>
    <mulerequester:config name="Mule_Requester" doc:name="Mule Requester"/>
    <amqp:connector name="AMQP_0_9_Connector" validateConnections="true" host="${rabbit.host}" username="${rabbit.username}" password="${rabbit.password}" ackMode="MANUAL" prefetchCount="1" numberOfChannels="1" doc:name="AMQP-0-9 Connector"/>
    <flow name="export_mam_avoFlow">
		<amqp:inbound-endpoint queueName="avo_export_request" responseTimeout="10000" connector-ref="AMQP_0_9_Connector" doc:name="Listen to avo_export_request" numberOfChannels="1">
            <reconnect-forever/>
        </amqp:inbound-endpoint>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <flow-ref name="init_variables" doc:name="init_variables"/>
        <flow-ref name="get_original_metadata_from_sidecar" doc:name="get_original_metadata_from_sidecar"/>
        <flow-ref name="get_new_pid" doc:name="get_new_pid"/>
        <flow-ref name="map_metadata" doc:name="map_metadata"/>
        <flow-ref name="transfer_files" doc:name="transfer_files"/>
        <flow-ref name="delete_original_files" doc:name="delete_original_files"/>
        <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
    </flow>
    <sub-flow name="init_variables">
        <set-variable variableName="filename" value="#[payload.sip_package[0].file_name.substring(0, payload.sip_package[0].file_name.lastIndexOf('.'))]" doc:name="Set filename without extension"/>
        <set-variable variableName="filepath" value="#[payload.sip_package[0].file_path]" doc:name="Set filepath"/>
        <set-variable variableName="host" value="#[payload.server]" doc:name="Set host"/>
        <set-variable variableName="username" value="#[payload.username]" doc:name="Set username"/>
        <set-variable variableName="password" value="#[payload.password]" doc:name="Set password"/>
        <set-variable variableName="state" value="#[&quot;SIP_DETECTED&quot;]" doc:name="Set state (SIP_DETECTED)"/>
        <flow-ref name="log_elastic_search" doc:name="log_elastic_search"/>
        <logger message="SIP_DETECTED" level="INFO" doc:name="SIP_DETECTED"/>
    </sub-flow>
    <sub-flow name="get_original_metadata_from_sidecar">
        <mulerequester:request config-ref="Mule_Requester" resource="#[&quot;ftp://&quot;+flowVars.username+&quot;:&quot;+flowVars.password+&quot;@&quot;+flowVars.host+&quot;/&quot;+flowVars.filepath+&quot;/&quot;+flowVars.filename+&quot;.xml?connector=FTP&quot;]" timeout="10000" throwExceptionOnTimeout="true" doc:name="Read sidecar"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <dw:transform-message doc:name="Extract MediaHAVEN_external_metadata">
            <dw:set-payload><![CDATA[%dw 1.0
%input payload application/xml
%output application/xml
---
{
    MediaHAVEN_external_metadata: payload.mets.dmdSec.mdWrap.xmlData.MediaHAVEN_external_metadata    
}]]></dw:set-payload>
        </dw:transform-message>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="original_metadata" value="#[payload]" doc:name="Set original_metadata with MHEM"/>
        <set-variable variableName="original_pid" value="#[xpath3('//PID/text()')]" doc:name="Set original_pid"/>
        <set-variable variableName="original_cp" value="#[xpath3('//CP/text()')]" doc:name="Set original_cp"/>
        <set-variable variableName="original_md5" value="#[xpath3('//md5_viaa/text()')]" doc:name="Set original_md5"/>
        <set-variable variableName="original_cp_id" value="#[xpath3('//CP_id/text()')]" doc:name="Set original_cp_id"/>
        <set-variable variableName="original_ingestspacename" value="#[xpath3('//ingestspacename/text()')]" doc:name="Set original_ingestspacename"/>
        <set-variable variableName="briefing_ids" value="#[xpath3(&quot;/string-join(//BriefingID[not(@type='list')]/text(), ' ')&quot;)]" doc:name="Set briefing_ids as text field for logging"/>
        <set-variable variableName="briefing_ids " value="#[flowVars.briefing_ids.replaceAll(&quot;\n&quot;,&quot;&quot;).trim().replaceAll(&quot;        &quot;,&quot; &quot;)]" doc:name="Rewrite briefing_ids without leading and trailing whitespace"/>
        <set-variable variableName="state" value="MD_OBTAINED" doc:name="Set state (MD_OBTAINED)"/>
        <flow-ref name="log_elastic_search" doc:name="log_elastic_search"/>
        <logger message="MD OBTAINED" level="INFO" doc:name="MD OBTAINED"/>
    </sub-flow>
    <sub-flow name="get_new_pid">
        <http:request config-ref="PID_webservice" path="${pid.path}" method="GET" doc:name="Request pid"/>
        <json:json-to-object-transformer returnClass="be.viaa.response.PIDIdResponse[]" doc:name="Get generated pid"/>
        <set-variable variableName="new_pid" value="#[payload[0].id]" doc:name="Set new_pid"/>
        <set-variable variableName="state" value="#[&quot;PID_OBTAINED&quot;]" doc:name="Set state (PID_OBTAINED)"/>
        <flow-ref name="log_elastic_search" doc:name="log_elastic_search"/>
        <logger message="PID OBTAINED" level="INFO" doc:name="PID OBTAINED"/>
    </sub-flow>
    <sub-flow name="map_metadata">
        <set-payload value="#[flowVars.original_metadata]" doc:name="Set Payload with original_metadata"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML (because it needs to an object and not a string)"/>
        <dw:transform-message metadata:id="0118c471-3028-463b-a667-7e79cd43bf6a" doc:name="Create adapted metadata">
            <dw:input-payload doc:sample="sample_data/empty.xml"/>
            <dw:input-variable variableName="metadata_no_root"/>
            <dw:input-variable variableName="generated_pid"/>
            <dw:input-variable doc:sample="sample_data\empty_2.xml" variableName="pid"/>
            <dw:input-variable  variableName="metadata" mimeType="application/xml"/>
            <dw:input-variable  variableName="original_metadata" doc:sample="sample_data/xml.xml"/>
            <dw:set-payload><![CDATA[%dw 1.0
%input payload application/xml
%output application/xml
---
{
	MediaHAVEN_external_metadata:  {
		// Copy everything except MDProperties
		(((payload.MediaHAVEN_external_metadata as :array) as :object) map (
			($) when $ != payload.MediaHAVEN_external_metadata.MDProperties otherwise {}
		)),
		"MDProperties": {
			(payload.MediaHAVEN_external_metadata.*MDProperties map (
				$
			)),
			// Original CP
			Original_CP: flowVars.original_cp,
			// Original CP ID
			Original_CP_id: p('vrt.ldap_id'),
			// Add relation to original PID
			"dc_relations" @(type: "list"): {
				is_verwant_aan: flowVars.original_pid
			}
		}
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="new_metadata" value="#[payload.replaceAll('&lt;PID&gt;'+flowVars.original_pid+'&lt;/PID&gt;', '&lt;PID&gt;'+flowVars.new_pid+'&lt;/PID&gt;').replaceAll('&lt;CP&gt;'+flowVars.original_cp+'&lt;/CP&gt;', '&lt;CP&gt;testbeeld&lt;/CP&gt;').replaceAll('&lt;CP_id&gt;'+flowVars.original_cp_id+'&lt;/CP_id&gt;', '&lt;CP_id&gt;OR-h41jm1d&lt;/CP_id&gt;').replaceAll('&lt;md5&gt;'+flowVars.original_md5+'&lt;/md5&gt;', '').replaceAll('&lt;md5_viaa&gt;'+flowVars.original_md5+'&lt;/md5_viaa&gt;', '').replaceAll('&lt;ingestspacename&gt;'+flowVars.original_ingestspacename+'&lt;/ingestspacename&gt;', '').replaceAll('    \n', '')]" doc:name="Set new_metadata by replacing PID, CP and CP_id and deleting MD5 and ingestspacename"/>
        <set-variable variableName="state" value="#[&quot;METADATA_MAPPED&quot;]" doc:name="Set state (METADATA_MAPPED)"/>
        <flow-ref name="log_elastic_search" doc:name="log_elastic_search"/>

        <logger message="METADATA MAPPED" level="INFO" doc:name="METADATA MAPPED"/>
    </sub-flow>
    <sub-flow name="transfer_files">
        <set-payload value="#[flowVars.new_metadata]" doc:name="Set Payload with new_metadata"/>
        <ftp:outbound-endpoint host="${ftpDestination.host}" port="21" responseTimeout="10000" doc:name="Export new sidecar to destination" password="${ftpDestination.password}" path="${ftpDestination.path}" user="${ftpDestination.username}" connector-ref="FTP" outputPattern="#[flowVars.new_pid + &quot;.xml&quot;]"/>
        <dw:transform-message doc:name="Create FXP request for essence with delete FALSE (TODO: set TRUE)">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	source_host: flowVars.host,
	source_path: flowVars.filepath,
	source_file: flowVars.filename ++ ".MP4",
	source_user: flowVars.username,
	source_password: flowVars.password,
	
	destination_host: p('ftpDestination.host'),
	destination_path: p('ftpDestination.path'),
	destination_file: flowVars.new_pid ++ ".mp4",
	destination_user: p('ftpDestination.username'),
	destination_password: p('ftpDestination.password'),
	
	move: false
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>

        <amqp:outbound-endpoint queueName="fxp_requests" responseTimeout="10000" exchange-pattern="request-response" connector-ref="AMQP_0_9_Connector" doc:name="Send message to fxp_requests"/>
        <set-variable variableName="state" value="#[&quot;SIP_DELIVERED&quot;]" doc:name="Set state (SIP_DELIVERED)"/>
        <flow-ref name="log_elastic_search" doc:name="log_elastic_search"/>
        <logger message="SIP DELIVERED" level="INFO" doc:name="SIP DELIVERED"/>
    </sub-flow>
    <sub-flow name="delete_original_files">
        <dw:transform-message doc:name="Create delete request for sidecar">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	host: flowVars.host,
	file_path: flowVars.filepath,
	file_name: flowVars.filename ++ ".xml",
	username: flowVars.username,
	password: flowVars.password
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <amqp:outbound-endpoint queueName="delete_requests" responseTimeout="10000" exchange-pattern="request-response" connector-ref="AMQP_0_9_Connector" doc:name="Send message to delete_requests"/>
        <set-variable variableName="state" value="#[&quot;SIDECAR_DELETED&quot;]" doc:name="Set state (SIDECAR_DELETED)"/>
        <flow-ref name="log_elastic_search" doc:name="log_elastic_search"/>
        <logger message="SIDECAR DELETED" level="INFO" doc:name="SIDECAR DELETED"/>
    </sub-flow>
    <sub-flow name="log_elastic_search">
        <dw:transform-message doc:name="Create message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	state: flowVars.state,
	timestamp:  now as :datetime {format: "yyyy-MM-dd'T'HH:mm:ss.SSSZ"},
	(tenant: flowVars.tenant) when flowVars.tenant != null,
	filename: flowVars.filename,
	filepath: flowVars.filepath,
	host: flowVars.host,
	(briefing_ids: flowVars.briefing_ids) when flowVars.briefing_ids != null,
	(briefing_title: flowVars.briefing_title) when flowVars.briefing_title != null,
	(original_pid: flowVars.original_pid) when flowVars.original_pid != null,
	(new_pid: flowVars.new_pid) when flowVars.new_pid != null,
	(original_metadata: flowVars.original_metadata) when flowVars.original_metadata != null,
	(new_metadata: flowVars.new_metadata) when flowVars.new_metadata != null
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <logger message="#[payload]" level="INFO" doc:name="Debug message"/>
        <http:request config-ref="elastic_search" path="avo_import_export/events" method="POST" doc:name="POST event to ES"/>
    </sub-flow>
</mule>
